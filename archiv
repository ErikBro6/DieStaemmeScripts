// ==UserScript==
// @name         Barbarenfarmer NEW (Toggleable)
// @namespace    http://tampermonkey.net/
// @version      1.5
// @description  Automates farming of nearby barbarian villages in Tribal Wars with toggle button
// @author       SpeckMich
// @match        https://*.die-staemme.de/game.php*
// @grant        GM.xmlHttpRequest
// @connect      *.die-staemme.de
// @updateURL    https://raw.githubusercontent.com/ErikBro6/DieStaemmeScripts/master/babaFarmer.user.js
// @downloadURL  https://raw.githubusercontent.com/ErikBro6/DieStaemmeScripts/master/babaFarmer.user.js
// @require      https://gist.githubusercontent.com/BrockA/2625891/raw/waitForKeyElements.js
// @run-at       document-idle
// ==/UserScript==

(async function () {
    'use strict';

    let unitsToSend = JSON.parse(localStorage.getItem("unitsToSend")) || {
        spear: 0,
        light: 0,
        spy: 0
    };

    const delayBetweenAttacks = 500;
    let radius = parseInt(localStorage.getItem("farmingRadius")) || 5;
    const farmingIntervalDelay = 5000;

    let farmingEnabled = JSON.parse(localStorage.getItem("farmingEnabled")) ?? true;
    let farmingInterval = null;

    function getWorld() {
        const hostname = window.location.hostname;
        const subdomain = hostname.split('.')[0];
        return subdomain;
    }
function createUnitsInputPanel() {
    const container = document.createElement('div');
    container.style.position = 'fixed';
    container.style.top = '150px';
    container.style.right = '20px';
    container.style.zIndex = 9999;
    container.style.backgroundColor = '#f9f9f9';
    container.style.padding = '10px';
    container.style.border = '1px solid #ccc';
    container.style.borderRadius = '8px';
    container.style.boxShadow = '0 0 5px rgba(0,0,0,0.2)';
    container.style.fontSize = '14px';
    container.style.maxHeight = '400px';
    container.style.overflowY = 'auto';

    const title = document.createElement('div');
    title.textContent = 'Units to Send';
    title.style.fontWeight = 'bold';
    title.style.marginBottom = '6px';
    container.appendChild(title);

    for (const unit in unitsToSend) {
        const row = document.createElement('div');
        row.style.marginBottom = '4px';

        const label = document.createElement('label');
        label.textContent = unit;
        label.style.marginRight = '5px';

        const input = document.createElement('input');
        input.type = 'number';
        input.value = unitsToSend[unit];
        input.style.width = '50px';
        input.min = 0;

        input.addEventListener('change', () => {
            unitsToSend[unit] = parseInt(input.value) || 0;
            localStorage.setItem("unitsToSend", JSON.stringify(unitsToSend));
        });

        row.appendChild(label);
        row.appendChild(input);
        container.appendChild(row);
    }

    const radiusTitle = document.createElement('div');
    radiusTitle.textContent = 'Farm Radius';
    radiusTitle.style.marginTop = '10px';
    radiusTitle.style.fontWeight = 'bold';
    container.appendChild(radiusTitle);

    const radiusInput = document.createElement('input');
    radiusInput.type = 'number';
    radiusInput.value = radius;
    radiusInput.min = 1;
    radiusInput.style.width = '50px';
    radiusInput.style.marginTop = '5px';

    radiusInput.addEventListener('change', () => {
        radius = parseInt(radiusInput.value) || 5;
        localStorage.setItem("farmingRadius", radius.toString());
    });

    container.appendChild(radiusInput);

    document.body.appendChild(container);
}



    function getStartCoordFromHeader() {
        const headerText = document.querySelector('#menu_row2 b')?.textContent;
        const match = headerText?.match(/\((\d+)\|(\d+)\)/);
        if (!match) throw new Error('Start coordinates not found!');
        return { x: parseInt(match[1]), y: parseInt(match[2]) };
    }

    function getDistance(x1, y1, x2, y2) {
        return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);
    }

    function fillUnitsAndSend(coords) {
        console.log("Attacking:", coords);

        waitForKeyElements('input[name="x"]', xInput => xInput.val(coords.x));
        waitForKeyElements('input[name="y"]', yInput => yInput.val(coords.y));

        for (const [unit, amount] of Object.entries(unitsToSend)) {
            waitForKeyElements(`input[name="${unit}"]`, unitInput => unitInput.val(amount));
        }

        let nextPosition = parseInt(localStorage.getItem("position")) + 1;
        localStorage.setItem("position", nextPosition);

        waitForKeyElements('.village-info', infoSpan => {
            const ownerInfo = infoSpan.text();
            if (ownerInfo.includes('Besitzer: Barbaren')) {
                waitForKeyElements('#target_attack', attackButton => attackButton.click());
            } else {
                console.log("Actually Spieler!");
                waitForKeyElements('img.village-delete', deleteIcon => {
                    deleteIcon.click();
                    setTimeout(() => location.reload(), 250);
                });
            }
        });
    }

    async function getAllVillages() {
        const world = getWorld();
        const url = `https://${world}.die-staemme.de/map/village.txt`;
        console.log("Fetching:", url);

        return new Promise((resolve, reject) => {
            GM.xmlHttpRequest({
                method: "GET",
                url: url,
                onload: function (response) {
                    const lines = response.responseText.trim().split('\n');
                    const barbarianVillages = [];

                    lines.forEach(line => {
                        const fields = line.split(',');
                        if (fields.length >= 6) {
                            const [id, name, x, y, owner_id, points] = fields;
                            if (owner_id === '0') {
                                barbarianVillages.push({
                                    id: parseInt(id),
                                    name: decodeURIComponent(name),
                                    x: parseInt(x),
                                    y: parseInt(y),
                                    points: parseInt(points)
                                });
                            }
                        }
                    });

                    resolve(barbarianVillages);
                },
                onerror: function (error) {
                    console.error('Error fetching village data:', error);
                    reject(error);
                }
            });
        });
    }

    async function farmBarbarians() {
        const barbarianVillages = await getAllVillages();
        const { x: originX, y: originY } = getStartCoordFromHeader();

        const nearbyBarbarians = barbarianVillages.filter(village => {
            const distance = getDistance(originX, originY, village.x, village.y);
            return distance <= radius;
        });

        console.log('Nearby Barbarian Villages:', nearbyBarbarians);

        let position = parseInt(localStorage.getItem("position") || "0");
        if (position >= nearbyBarbarians.length) {
            position = 0;
        }

        localStorage.setItem("position", position.toString());
        const targetVillage = nearbyBarbarians[position];

        if (targetVillage) {
            fillUnitsAndSend({ x: targetVillage.x, y: targetVillage.y });
        } else {
            console.log("No valid target found at position", position);
        }
    }

    function startFarming() {
        if (!farmingInterval) {
            farmBarbarians();
            farmingInterval = setInterval(() => {
                if (farmingEnabled) {
                    farmBarbarians();
                }
            }, farmingIntervalDelay);
            console.log("Farming started.");
        }
    }

    function stopFarming() {
        clearInterval(farmingInterval);
        farmingInterval = null;
        console.log("Farming stopped.");
    }

    function createToggleButton() {
        const toggleButton = document.createElement('button');
        toggleButton.textContent = farmingEnabled ? "Farming: ON" : "Farming: OFF";
        toggleButton.style.position = 'fixed';
        toggleButton.style.top = '100px';
        toggleButton.style.right = '20px';
        toggleButton.style.zIndex = 9999;
        toggleButton.style.padding = '8px 12px';
        toggleButton.style.backgroundColor = farmingEnabled ? '#4CAF50' : '#f44336';
        toggleButton.style.color = 'white';
        toggleButton.style.border = 'none';
        toggleButton.style.borderRadius = '5px';
        toggleButton.style.cursor = 'pointer';
        toggleButton.style.fontWeight = 'bold';

        toggleButton.addEventListener('click', () => {
            farmingEnabled = !farmingEnabled;
            localStorage.setItem("farmingEnabled", JSON.stringify(farmingEnabled));
            toggleButton.textContent = farmingEnabled ? "Farming: ON" : "Farming: OFF";
            toggleButton.style.backgroundColor = farmingEnabled ? '#4CAF50' : '#f44336';

            if (farmingEnabled) {
                startFarming();
            } else {
                stopFarming();
            }
        });

        document.body.appendChild(toggleButton);
    }

    window.addEventListener('load', () => {
        createToggleButton();
        createUnitsInputPanel();
        if (farmingEnabled) {
            startFarming();
        }
    });
})();


// ==UserScript==
// @name         NEW Farmer
// @namespace    http://tampermonkey.net/
// @version      2025-04-25
// @description  Farmt Babas
// @author       You
// @match        https://des1.die-staemme.de/game.php?village=*&screen=place
// @icon         https://www.google.com/s2/favicons?sz=64&domain=die-staemme.de
// @grant        none
// ==/UserScript==

(function () {
    'use strict';
  
    const TEMPLATE_NAME = 'spy'; // 📋 Change your Vorlage here
  
    const log = (...args) => console.log('[FarmBot]', ...args);
    const error = (...args) => console.error('[FarmBot ERROR]', ...args);
  
    const getRandomDelay = (min = 500, max = 950) =>
      Math.floor(Math.random() * (max - min + 1)) + min;
  
    const findTemplateLink = () =>
      Array.from(document.querySelectorAll('a')).find(
        (a) => a.textContent.trim() === TEMPLATE_NAME
      );
  
    const fillUnitsAndSend = (coords) => {
      const coordField = document.querySelector('.target-input-field');
      const templateLink = findTemplateLink();
  
      if (!coordField || !templateLink) {
        error('Koordinatenfeld oder Vorlage nicht gefunden!');
        return;
      }
  
      coordField.value = coords;
      templateLink.click();
  
      document.querySelector('#target_attack')?.click();
  
      setTimeout(() => {
        document.querySelector('#troop_confirm_go')?.click();
      }, 1000);
    };
  
    const farmBarbarians = (storageKey) => {
      const barbarianVillages = JSON.parse(localStorage.getItem(storageKey));
      if (!barbarianVillages || barbarianVillages.length === 0) {
        error('Keine Barbarendörfer gefunden zum Farmen.');
        return;
      }
  
      const randomVillage =
        barbarianVillages[Math.floor(Math.random() * barbarianVillages.length)];
  
      setTimeout(() => {
        fillUnitsAndSend(randomVillage);
      }, getRandomDelay());
    };
  
    const getStartCoordFromHeader = () => {
      const headerText = document.querySelector('#menu_row2 b')?.textContent;
      const match = headerText?.match(/\((\d+)\|(\d+)\)/);
  
      if (!match) throw new Error('Startkoordinaten nicht gefunden!');
      return { x: parseInt(match[1]), y: parseInt(match[2]) };
    };
  
    const getSurroundingCoords = (centerX, centerY, radius) => {
      const coords = [];
      for (let dx = -radius; dx <= radius; dx++) {
        for (let dy = -radius; dy <= radius; dy++) {
          const distance = Math.hypot(dx, dy);
          if (distance <= radius && (dx !== 0 || dy !== 0)) {
            coords.push({ x: centerX + dx, y: centerY + dy });
          }
        }
      }
      return coords;
    };
  
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
  
    const findBarbarianVillages = async (centerX, centerY, radius, storageKey) => {
      const coordsToCheck = getSurroundingCoords(centerX, centerY, radius);
      const validVillages = [];
  
      const inputField = document.querySelector('.target-input-field');
      if (!inputField) {
        error('Input-Feld nicht gefunden!');
        return;
      }
  
      for (const { x, y } of coordsToCheck) {
        const coordString = `${x}|${y}`;
        inputField.value = coordString;
        inputField.dispatchEvent(new Event('input', { bubbles: true }));
  
        await sleep(100); // Adjust this if your connection is very fast
  
        if (document.body.innerHTML.includes('<strong>Besitzer:</strong> Barbaren <strong>')) {
          validVillages.push(coordString);
          log(`✅ Barbarendorf gefunden: ${coordString}`);
        } else {
          log(`❌ Kein Barbarendorf: ${coordString}`);
        }
      }
  
      localStorage.setItem(storageKey, JSON.stringify(validVillages));
      log(`🧹 Barbarendörfer gespeichert: ${validVillages.length} Stück`);
      farmBarbarians(storageKey);
    };
  
    // ============================
    // MAIN - Start the script
    // ============================
    (async function init() {
      try {
        log('🏁 Starte FarmBot...');
        const { x, y } = getStartCoordFromHeader();
        const originCoord = `${x}|${y}`;
        const radiusStorageKey = `radius_${originCoord}`;
  
        let radius = parseInt(localStorage.getItem(radiusStorageKey), 10);
  
        if (isNaN(radius) || radius < 1) {
          radius = parseInt(prompt('🧭 Gib den Farm Radius ein:'), 10);
          if (isNaN(radius) || radius < 1) {
            error('Ungültiger Radius eingegeben!');
            return;
          }
          localStorage.setItem(radiusStorageKey, radius.toString());
          log(`🔄 Neuer Radius gespeichert: ${radius}`);
        } else {
          log(`✅ Gefundener gespeicherter Radius: ${radius}`);
        }
  
        const storageKey = `bb_${originCoord}_${radius}`;
        const existingData = JSON.parse(localStorage.getItem(storageKey));
  
        if (existingData && existingData.length > 0) {
          log('📦 Barbarendörfer bereits gespeichert. Starte Farm...');
          farmBarbarians(storageKey);
        } else {
          log('🔎 Suche nach Barbarendörfern...');
          await findBarbarianVillages(x, y, radius, storageKey);
        }
  
      } catch (err) {
        error('Fehler beim Ausführen:', err.message || err);
      }
    })();
  
  })();
  

  // ==UserScript==
// @name         FarmBot
// @namespace    http://tampermonkey.net/
// @version      2025-04-22
// @description  try to take over the world!
// @author       You
// @match        https://des1.die-staemme.de/game.php?screen=place&village=*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=die-staemme.de
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    const vorlage = 'spy' // 👈 Vorlage hier anpassen

    const vorlageToClick = Array.from(document.querySelectorAll('a')).find(a => a.textContent.trim() === vorlage);

    function getRandomDelay(min = 500, max = 950) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function fillUnitsAndSend(coords) {
        const coordField = document.querySelector('.target-input-field');
         coordField.value = coords;

        if (vorlageToClick) {
            vorlageToClick.click();
        } else {
            console.warn("❌ Kein Link mit Text 'plaa' gefunden.");
        }

        document.querySelector('#target_attack').click();

        setTimeout(() => {
            document.querySelector('#troop_confirm_go').click();
        }, 1000);
    }

    function farmBarbarians(storageKey) {
        const barbarianVillages = JSON.parse(localStorage.getItem(storageKey));
        const randomIndex = Math.floor(Math.random() * barbarianVillages.length);
        const randomVillage = barbarianVillages[randomIndex];
        setTimeout(() => {
            fillUnitsAndSend(randomVillage);
        }, getRandomDelay());
    }


// Koordinaten aus dem Header ziehen
function getStartCoordFromHeader() {
  const headerText = document.querySelector('#menu_row2 b')?.textContent;
  const match = headerText.match(/\((\d+)\|(\d+)\)/);
  if (match) {
    return { x: parseInt(match[1]), y: parseInt(match[2]) };
  }
  throw new Error('Startkoordinaten nicht gefunden!');
}


// ===================
// START & CHECK LOGIK
// ===================
try {

  console.log('FarmBot');
  const { x, y } = getStartCoordFromHeader();
  const originCoord = `${x}|${y}`;

  const radiusstorageKey = `radius_${originCoord}`;
  const radius = JSON.parse(localStorage.getItem(radiusstorageKey));

  const storageKey = `bb_${originCoord}_${radius}`;
  console.log(storageKey);
  const existingData = localStorage.getItem(storageKey);
  console.log(existingData);
  if (existingData) {
      farmBarbarians(storageKey);
  }else{
      console.error("❌ Farmbot nicht gestartet!");

  }

} catch (error) {
  console.error("❌ Fehler beim Ausführen:", error.message);
}

})();

// ==UserScript==
// @name         FarmBot
// @namespace    http://tampermonkey.net/
// @version      2025-04-22
// @description  try to take over the world!
// @author       You
// @match        https://des1.die-staemme.de/game.php?screen=place&village=*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=die-staemme.de
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    const vorlage = 'spy' // 👈 Vorlage hier anpassen

    const vorlageToClick = Array.from(document.querySelectorAll('a')).find(a => a.textContent.trim() === vorlage);

    function getRandomDelay(min = 500, max = 950) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function fillUnitsAndSend(coords) {
        const coordField = document.querySelector('.target-input-field');
         coordField.value = coords;

        if (vorlageToClick) {
            vorlageToClick.click();
        } else {
            console.warn("❌ Kein Link mit Text 'plaa' gefunden.");
        }

        document.querySelector('#target_attack').click();

        setTimeout(() => {
            document.querySelector('#troop_confirm_go').click();
        }, 1000);
    }

    function farmBarbarians(storageKey) {
        const barbarianVillages = JSON.parse(localStorage.getItem(storageKey));
        const randomIndex = Math.floor(Math.random() * barbarianVillages.length);
        const randomVillage = barbarianVillages[randomIndex];
        setTimeout(() => {
            fillUnitsAndSend(randomVillage);
        }, getRandomDelay());
    }


// Koordinaten aus dem Header ziehen
function getStartCoordFromHeader() {
  const headerText = document.querySelector('#menu_row2 b')?.textContent;
  const match = headerText.match(/\((\d+)\|(\d+)\)/);
  if (match) {
    return { x: parseInt(match[1]), y: parseInt(match[2]) };
  }
  throw new Error('Startkoordinaten nicht gefunden!');
}


// ===================
// START & CHECK LOGIK
// ===================

try {

  console.log('FarmBot');
  const { x, y } = getStartCoordFromHeader();
  const originCoord = `${x}|${y}`;

  const radiusstorageKey = `radius_${originCoord}`;
  const radius = JSON.parse(localStorage.getItem(radiusstorageKey));

  const storageKey = `bb_${originCoord}_${radius}`;
  console.log(storageKey);
  const existingData = localStorage.getItem(storageKey);
  console.log(existingData);
  if (existingData) {
      farmBarbarians(storageKey);
  }else{
      console.error("❌ Farmbot nicht gestartet!");
  }

} catch (error) {
  console.error("❌ Fehler beim Ausführen:", error.message);
}

})();







// ==UserScript==
// @name        Barbarendorf Farmer (Auto-Start)
// @namespace   http://tampermonkey.net/
// @version     1.2
// @description Farmt automatisch Barbarendörfer ab, ohne Button
// @author      OpenAI
// @match       https://des1.die-staemme.de/game.php?screen=place&village=198*
// @grant       none
// ==/UserScript==

(function() {
    'use strict';

    const barbarianVillages = [
        "505|487",
        "508|486",
        "505|485",
        "505|487",
        "505|485",
        "507|484",
        "508|486"
    ];

    const unitsToSend = {
        spear: 0,
        sword: 0,
        axe: 0,
        archer: 0,
        light: 10,
        marcher: 0,
        heavy: 0,
        knight: 0
    };

    const delayBetweenAttacks = 500;

    function parseCoords(coordStr) {
        const [x, y] = coordStr.split('|').map(Number);
        return { x, y };
    }

    function fillUnitsAndSend(coords) {
        document.querySelector('input[name="x"]').value = coords.x;
        document.querySelector('input[name="y"]').value = coords.y;

        for (const [unit, amount] of Object.entries(unitsToSend)) {
            const inputField = document.querySelector(`input[name="${unit}"]`);
            if (inputField) {
                inputField.value = amount;
            }
        }

        document.querySelector('#target_attack').click();

        setTimeout(() => {
            document.querySelector('#troop_confirm_go').click();
        }, 500);
    }

    function farmBarbarians() {
        let delay = 0;
        barbarianVillages.forEach((coordStr) => {
            const village = parseCoords(coordStr);
            setTimeout(() => {
                fillUnitsAndSend(village);
            }, delay);
            delay += delayBetweenAttacks;
        });
    }

    // Auto-start after short delay to allow DOM to load
    window.addEventListener('load', () => {
        setTimeout(farmBarbarians, 500); // 1 Sekunde warten nach Seitenlade-Ende
    });
})();


// ==UserScript==
// @name       DSSelectVillages
// @namespace  phisa, suilenroc
// @version    2.0
// @description
// @copyright  Phisa / Philipp Winter 2013
// @license    MIT License - just do anything you want with this script - http://opensource.org/licenses/MIT
// @include    https://de*.die-staemme.de/game.php*screen=map
// @include    https://de*.die-staemme.de/game.php*screen=map*
// ==/UserScript==

var win = typeof unsafeWindow != 'undefined' ? unsafeWindow : window;

// --- Anfang einstellbare Variablen ------
win.filter = false;
win.showWithCoords = false;
win.showWithCounter = false;

win.breakAfter = 5;
win.activationCharCode = 'b';
// --- Ende einstellbare Variablen ------

win.$.ajaxSetup({ cache: true });
win.$.getScript('https://media.innogames.com/com_DS_DE/Scriptdatenbank/userscript_main/90_selectvillages_phisa.js');













// ==UserScript==
// @name        NEW Farmer
// @namespace   http://tampermonkey.net/
// @version     1.2
// @description Farmt automatisch Barbarendörfer ab, indem der Button automatisch geklickt wird (Auto-Start via Button-Simulation)
// @author      OpenAI
// @match       https://*.die-staemme.de/game.php*
// @grant       none
// ==/UserScript==



(function () {
    'use strict';

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async function findBarbarianVillages(centerX, centerY, radius, storageKey) {
        const coordsToCheck = getSurroundingCoords(centerX, centerY, radius);
        const validbbs = [];

        const inputField = document.querySelector('.target-input-field');
        if (!inputField) {
            console.error("❌ Input-Feld nicht gefunden!");
            return;
        }

        for (const coord of coordsToCheck) {
            const coordString = `${coord.x}|${coord.y}`;
            inputField.value = coordString;
            inputField.dispatchEvent(new Event('input', { bubbles: true }));

            await sleep(100); // ggf. anpassen

            if (document.body.innerHTML.includes('<strong>Besitzer:</strong> Barbaren <strong>')) {
                validbbs.push(coordString);
                console.log(`✅ Barbarendorf gefunden bei ${coordString}`);
            } else {
                console.log(`❌ Kein Barbar bei ${coordString}`);
            }
        }

        localStorage.setItem(storageKey, JSON.stringify(validbbs));
        farmBarbarians(storageKey);
    }

    let radius = parseInt(prompt("🧭 Gib den Farm Radius ein:"), 10);
    if (isNaN(radius) || radius < 1) {
        return;
    }
    try {

        const { x, y } = getStartCoordFromHeader();
        const originCoord = `${x}|${y}`;

        const radiusstorageKey = `radius_${originCoord}`;
        const oldRadius = localStorage.getItem(radiusstorageKey);
        if(oldRadius != radius){
            localStorage.setItem(radiusstorageKey, radius);
        }

        const storageKey = `bb_${originCoord}_${radius}`;

        const existingData = localStorage.getItem(storageKey);

        if (existingData) {
            const barbarianVillages = existingData
        }else{
            findBarbarianVillages(x, y, radius, storageKey);
        }

    } catch (error) {
        console.error("❌ Fehler beim Ausführen:", error.message);
    }


    const params = new URLSearchParams(window.location.search);
    if (params.get("screen") !== "place") return;

    

    const unitsToSend = {
        spear: 0,
        sword: 0,
        axe: 0,
        archer: 0,
        light: 50,
        marcher: 0,
        ram: 0,
        heavy: 0
    };

    const delayBetweenAttacks = 1000;

    function parseCoords(coordStr) {
        const [x, y] = coordStr.split('|').map(Number);
        return { x, y };
    }

    function fillUnitsAndSend(coords) {
        document.querySelector('input[name="x"]').value = coords.x;
        document.querySelector('input[name="y"]').value = coords.y;

        for (const [unit, amount] of Object.entries(unitsToSend)) {
            const inputField = document.querySelector(`input[name="${unit}"]`);
            if (inputField) {
                inputField.value = amount;
            }
        }

        document.querySelector('#target_attack')?.click();

        setTimeout(() => {
            document.querySelector('#troop_confirm_go')?.click();
        }, 250);
    }

    function farmBarbarians() {
        let delay = 0;
        const randomIndex = Math.floor(Math.random() * barbarianVillages.length);
        const randomVillage = parseCoords(barbarianVillages[randomIndex]);

        setTimeout(() => {
            fillUnitsAndSend(randomVillage);
        }, delay);
    }

    function getStartCoordFromHeader() {
        const headerText = document.querySelector('#menu_row2 b')?.textContent;
        const match = headerText.match(/((\d+)|(\d+))/);
        if (match) {
            return { x: parseInt(match[1]), y: parseInt(match[2]) };
        }
        throw new Error('Startkoordinaten nicht gefunden!');
    }

    // Schritt 2: Umkreis generieren
    function getSurroundingCoords(centerX, centerY, radius) {
        const coords = [];
        for (let dx = -radius; dx <= radius; dx++) {
            for (let dy = -radius; dy <= radius; dy++) {
                const distance = Math.sqrt(dx * dx + dy * dy);
                if (distance <= radius && !(dx === 0 && dy === 0)) {
                    coords.push({ x: centerX + dx, y: centerY + dy });
                }
            }
        }
        return coords;
    }

    // Schritt 3: Warten
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // Schritt 4: Alles zusammen
    async function findBarbarianVillages(radius = 1) {
        const { x, y } = getStartCoordFromHeader();
        const coordsToCheck = getSurroundingCoords(x, y, radius);
        const validbbs = [];

        const inputField = document.querySelector('.target-input-field');
        if (!inputField) {
            console.error("Input-Feld nicht gefunden!");
            return;
        }

        for (const coord of coordsToCheck) {
            const coordString = `${coord.x}|${coord.y}`;

            // Input setzen
            inputField.value = coordString;
            inputField.dispatchEvent(new Event('input', { bubbles: true }));

            // Warten, bis Seite/Ajax aktualisiert (ggf. Zeit anpassen)
            await sleep(200);

            // DOM prüfen (du kannst hier auch präziser z. B. einen Container ansprechen)
            if (document.body.innerHTML.includes('<strong>Besitzer:</strong> Barbaren <strong>')) {
                validbbs.push(coordString);

            } else {
                console.log("error");
            }
        }

        console.log('✅ Gefundene Barbaren-Dörfer:', validbbs);
        return validbbs;
    }


    const startButton = document.createElement('button');
    startButton.textContent = 'Starte Barbarendörfer Farmen';
    startButton.style.marginLeft = '10px';
    startButton.onclick = farmBarbarians;

    const commandActions = document.getElementById("command_actions");
    if (commandActions) {
        commandActions.appendChild(startButton);

        // Klick automatisch nach kurzem Delay simulieren
        setTimeout(() => {
            startButton.click();
        }, 250);
    } else {
        console.error("Element mit der ID 'command_actions' nicht gefunden.");
    }
})();

